import { Telegraf, Scenes, Markup } from 'telegraf'
import type { InlineQueryResult } from 'telegraf/typings/core/types/typegram.js'
import { config } from './config'
// import fileQ from './questions/index.json' assert { type: 'json' };
// import db from './utils/database.js';

const bot = new Telegraf<Scenes.SceneContext>(config.botToken)

const COMMANDS = [
  { command: '/start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞' },
  {
    command: '/info',
    description: '–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞',
  },
  {
    command: '/help',
    description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
  },
  {
    command: '/quit',
    description: '–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞',
  },
  {
    command: '/oldschool',
    description: 'oldschool',
  },
  {
    command: '/hipster',
    description: 'hipster',
  },
  {
    command: '/game',
    description: 'Game',
  },
]

const chats: Record<string, number> = {}

const init = (): void => {
  bot.telegram.setMyCommands(COMMANDS)

  bot.start(ctx => ctx.reply('Welcome'))
  bot.help(ctx => ctx.reply('Send me a sticker'))
  bot.command('oldschool', ctx => ctx.reply('Hello'))
  bot.command('hipster', Telegraf.reply('Œª'))

  bot.action('like', ctx => {
    return ctx.answerCbQuery('like!')
  })

  bot.action('dislike', ctx => {
    return ctx.answerCbQuery('dislike!')
  })

  bot.action(/.+/, ctx => {
    return ctx.answerCbQuery(`–û–π, ${ctx.match[0]}! –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ`)
  })

  bot.use(async (ctx, next) => {
    // –ú–ò–î–õ–ï–í–ê–†–ê
    console.time(`Processing update ${ctx.update.update_id}`)
    await next()
    console.timeEnd(`Processing update ${ctx.update.update_id}`)
  })

  bot.on('callback_query', async ctx => {
    console.log('callback_query')
    await ctx.telegram.answerCbQuery(ctx.callbackQuery.id)
    await ctx.answerCbQuery()
  })

  bot.on('inline_query', async ctx => {
    console.log('inline_query')
    const result: InlineQueryResult[] = []
    await ctx.telegram.answerInlineQuery(ctx.inlineQuery.id, result)
    await ctx.answerInlineQuery(result)
  })

  bot.on('text', async ctx => {
    const { update, chat } = ctx
    const { message } = update
    const { text } = message
    console.log('ctx', message.text)

    await ctx.reply('–ò—â—É –æ—Ç–≤–µ—Ç...')

    if (text.toLocaleLowerCase() === '–Ω–∏–Ω–∞') {
      await ctx.replyWithSticker({
        url: 'https://chpic.su/_data/stickers/b/Belkosemja/Belkosemja_011.webp',
      })
      return ctx.reply('–ü–æ—à–ª–∏ —Å–ø–∞—Ç—å!')
    }
    if (text === '/start') {
      await ctx.replyWithSticker({
        url: 'https://chpic.su/_data/stickers/b/Belkosemja/Belkosemja_011.webp',
      })
      return ctx.reply(
        `–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞—Ä–≤–∏–Ω. –Ø ‚Äì –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è 
        –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–µ—à–∏—Ç—å —Ç–≤–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã. –¢—ã –º–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –æ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–µ, 
        –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –∏–ª–∏ –ø–æ—Å–ª—É—à–∞—Ç—å –º–æ–π —Å–æ–≤–µ—Ç.`,
      )
    }

    if (text === '/info') {
      return ctx.reply('–¢–µ–±—è –∑–æ–≤—É—Ç: ' + ('first_name' in chat && chat.first_name))
    }

    if (text === '/game') {
      await ctx.reply('–ó–∞–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9, –Ω—É–∂–Ω–æ –æ—Ç–≥–∞–¥–∞—Ç—å.')
      const random = Math.floor(Math.random() * 10)

      chats[chat.id] = random

      bot.action('test', async ctx => {
        console.log(ctx)
        try {
          await ctx.answerCbQuery()
        } catch (error) {
          console.error(error)
        }
      })

      return ctx.reply(
        '–ú–æ–∂–Ω–æ –æ—Ç–≥–∞–¥—ã–≤–∞—Ç—å',
        Markup.inlineKeyboard([
          Markup.button.callback('üëç', 'like'),
          Markup.button.callback('üëé', 'dislike'),
          Markup.button.callback('0', '0'),
          Markup.button.callback('1', '1'),
          Markup.button.callback('2', '2'),
          Markup.button.callback('3', '3'),
          Markup.button.callback('4', '4'),
          Markup.button.callback('5', '5'),
          Markup.button.callback('6', '6'),
          Markup.button.callback('7', '7'),
          Markup.button.callback('8', '8'),
          Markup.button.callback('9', '9'),
        ]),
      )
    }

    return ctx.reply('–ß—Ç–æ-—Ç–æ —è –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é...')
  })
  // bot.on('text', (ctx) => {
  //   console.log(ctx.update.message);

  //   // db.writeMessage(ctx.update.message.text, ctx.update.message.date);
  //   console.log(ctx);

  //   const res = fileQ.data.find((item) => {
  //     console.log(item.question, '===', ctx.update.message.text);

  //     if (
  //       // typeof ctx.update.message === 'string' &&
  //       item.question === ctx.update.message.text
  //     ) {
  //       return true;
  //     }
  //     return false;
  //   });

  //   if (res?.response) {
  //     ctx.reply(res.response);
  //   } else {
  //     ctx.reply(fileQ.data[fileQ.data.length - 1].response);
  //   }
  //   // ctx.reply(
  //   //   '–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞—Ä–≤–∏–Ω. –Ø ‚Äì –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞,'
  //   // );
  // });

  bot.launch()
}

init()

process.once('SIGINT', () => {
  bot.stop('SIGINT')
})
process.once('SIGTERM', () => {
  bot.stop('SIGTERM')
})
